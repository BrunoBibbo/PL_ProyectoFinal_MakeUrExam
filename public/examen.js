/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var examen = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"test":3,"examen":4,"EOF":5,"EXAMEN":6,"DOSPUNTOS":7,"ID":8,"preguntas":9,"pregunta":10,"PREGUNTA":11,"LEFTQ":12,"RIGHTQ":13,"tiporespuesta":14,"TEXTO":15,"respuesta":16,"VF":17,"respuestas_vf":18,"MULTI":19,"respuestas_multi":20,"V":21,"F":22,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"EXAMEN",7:"DOSPUNTOS",8:"ID",11:"PREGUNTA",12:"LEFTQ",13:"RIGHTQ",15:"TEXTO",17:"VF",19:"MULTI",21:"V",22:"F"},
productions_: [0,[3,2],[4,4],[9,1],[10,6],[10,5],[10,5],[10,4],[14,3],[14,3],[14,3],[16,1],[18,0],[18,4],[18,4],[20,0],[20,4],[20,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
			resetVF();
			this.$ = { HTML: "<div class='examen' align=left><form name='Prueba' id='prueba' method='post' action='#'>" + $$[$0-1].HTML, Resultados: $$[$0-1].Resultados };
			this.$.HTML += "<br><input type='button' id='corregir' value='Corregir'><br></form></div>";
			resetVF();
			return [this.$.HTML, this.$.Resultados];
		
break;
case 2: 
			this.$ = { HTML: "<br><h1><b>" + $$[$0-1] + "</b></h1><br>" + $$[$0].HTML, Resultados: $$[$0].Resultados }; 
		
break;
case 3: 
			var html = $$[$0].HTML;
			var res;
			
			if($$[$0].length > 1){
			  html = "<strong>" + 1 + "." + "</strong>" + $$[$0][0].HTML + "<br><br>";
			  res = [$$[$0][0].Resultados];
			  for(i = 1; i < $$[$0].length; i++){
			    html += "<strong>" + (i+1) + "." + "</strong>" + $$[$0][i].HTML + "<br><br>";
			    res.push($$[$0][i].Resultados);
			  }
			}
			else{
			  var html = $$[$0].HTML;
			  res = [$$[$0].Resultados];
			}

			this.$ = { HTML: html, Resultados: res }; 
		
break;
case 4: 
		total = nPregunta;
		this.$ = [{ HTML: "<strong>" + $$[$0-4] + $$[$0-3] + $$[$0-2] + "</strong><br>" + $$[$0-1].HTML, Resultados: $$[$0-1].Resultados }].concat($$[$0]);
		
break;
case 5: 
		total = nPregunta;
		this.$ = { HTML: "<strong>" + $$[$0-3] + $$[$0-2] + $$[$0-1] + "</strong><br>" + $$[$0].HTML + "<br>", Resultados: $$[$0].Resultados }; 
		
break;
case 6: 
		total = nPregunta;
		this.$ = [{ HTML: "<strong>" + $$[$0-3] + $$[$0-2] + "</strong><br>" + $$[$0-1].HTML, Resultados: $$[$0-1].Resultados }].concat($$[$0]);
		
break;
case 7: 
		total = nPregunta;
		this.$ = { HTML: "<strong>" + $$[$0-2] + $$[$0-1] + "</strong><br>" + $$[$0].HTML + "<br>", Resultados: $$[$0].Resultados };
		
break;
case 8: 
		  this.$ = { HTML: "<input type='text' size='15' name=" + (nPregunta-total) + "><br>", Resultados: $$[$0].Resultados };
		  nPregunta++;
		
break;
case 9: 
			comprobarRespVF();

			var html = $$[$0][0].HTML;
			var res;
			res = [$$[$0][0].Resultados];
			for(i = 1; i < $$[$0].length; i++){
			  if($$[$0][i] != undefined){
			    html += $$[$0][i].HTML;
			    res.push($$[$0][i].Resultados);
			  }
			}

			this.$ = { HTML: html, Resultados: res };
			resetVF();
			nPregunta++;
		
break;
case 10: 
			comprobarMulti();
			resetMulti();
			
			var html = $$[$0][0].HTML;
			var res;
			res = [$$[$0][0].Resultados];
			for(i = 1; i < $$[$0].length; i++){
			  if($$[$0][i] != undefined){
			    html += $$[$0][i].HTML;
			    res.push($$[$0][i].Resultados);
			  }
			}

			this.$ = { HTML: html, Resultados: res };
			resetMulti();
			nPregunta++;
		
break;
case 11: this.$ = { HTML: $$[$0], Resultados: $$[$0] }; 
break;
case 13: 
			sumarV();
			this.$ = [{ HTML: "<input type='radio' value='V' name=" + (nPregunta-total) + ">" + $$[$0-1] + ".<br>", Resultados: 'V' }].concat($$[$0]);
		
break;
case 14: 
			sumarF();
			this.$ = [{ HTML: "<input type='radio' value='F' name=" + (nPregunta-total) + ">" + $$[$0-1] + ".<br>", Resultados: 'F' }].concat($$[$0]);
		
break;
case 16: 
			sumarV();
			sumarMulti();
			this.$ = [{ HTML: "<input type='checkbox' value='VM' name=" + (nPregunta-total) + ">" + $$[$0-1] + ".<br>", Resultados: 'VM' }].concat($$[$0]);
		
break;
case 17: 
			sumarMulti();
			this.$ = [{ HTML: "<input type='checkbox' value='FM' name=" + (nPregunta-total) + ">" + $$[$0-1] + ".<br>", Resultados: 'FM' }].concat($$[$0]);
		
break;
}
},
table: [{3:1,4:2,6:[1,3]},{1:[3]},{5:[1,4]},{7:[1,5]},{1:[2,1]},{8:[1,6]},{9:7,10:8,11:[1,9]},{5:[2,2]},{5:[2,3]},{8:[1,11],12:[1,10]},{8:[1,12]},{7:[1,13]},{13:[1,14]},{14:15,15:[1,16],17:[1,17],19:[1,18]},{14:19,15:[1,16],17:[1,17],19:[1,18]},{5:[2,7],10:20,11:[1,9]},{7:[1,21]},{7:[1,22]},{7:[1,23]},{5:[2,5],10:24,11:[1,9]},{5:[2,6]},{8:[1,26],16:25},{5:[2,12],11:[2,12],18:27,21:[1,28],22:[1,29]},{5:[2,15],11:[2,15],20:30,21:[1,31],22:[1,32]},{5:[2,4]},{5:[2,8],11:[2,8]},{5:[2,11],11:[2,11]},{5:[2,9],11:[2,9]},{7:[1,33]},{7:[1,34]},{5:[2,10],11:[2,10]},{7:[1,35]},{7:[1,36]},{8:[1,37]},{8:[1,38]},{8:[1,39]},{8:[1,40]},{5:[2,12],11:[2,12],18:41,21:[1,28],22:[1,29]},{5:[2,12],11:[2,12],18:42,21:[1,28],22:[1,29]},{5:[2,15],11:[2,15],20:43,21:[1,31],22:[1,32]},{5:[2,15],11:[2,15],20:44,21:[1,31],22:[1,32]},{5:[2,13],11:[2,13]},{5:[2,14],11:[2,14]},{5:[2,16],11:[2,16]},{5:[2,17],11:[2,17]}],
defaultActions: {4:[2,1],7:[2,2],8:[2,3],20:[2,6],24:[2,4]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
 
  var verdadero = 0;
  var falso = 0;
  
  var multi = 0;
  
  var nPregunta = 1;
  
  var total = 0;
  
  function sumarV() {
	verdadero++;
  }
  
  function sumarF() {
	falso++;
  }
  
  function sumarMulti(){
	multi++;
  }
  
  function resetVF() {
	verdadero = 0;
	falso = 0;
  }
  
  function resetMulti() {
	multi = 0;
	verdadero = 0;
  }
  
  function comprobarRespVF() {
	if(falso == 0 || verdadero != 1)
		throw new Error("Verdadero-Falso mal definido. Ha de tener una respuesta verdadera y al menos una falsa.");
  }
  
  function comprobarMulti() {
	if(multi <= 1)
		throw new Error("Error! No pueden haber menos de dos respuestas");
	if(verdadero < 1)
		throw new Error("Error! Tiene que haber al menos una respuesta verdadera");
  }
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var reserved_words ={ EXAMEN: 'EXAMEN', PREGUNTA: 'PREGUNTA', TEXTO: 'TEXTO', MULTI: 'MULTI', VF: 'VF', V: 'V', F: 'F' }

function idORrw(x) {
  return (x in reserved_words)? x : 'ID'
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and comments */
break;
case 1:return 12
break;
case 2:return 13
break;
case 3:return 7
break;
case 4:return idORrw(yy_.yytext)
break;
case 5:return yy_.yytext;
break;
case 6:return 5
break;
case 7:return 'PUNTO'
break;
}
},
rules: [/^(?:\s+|#.*)/,/^(?:¿)/,/^(?:\?)/,/^(?::)/,/^(?:\b([A-Z]+|[A-Z]?(([a-z]+|([+-]?\d+(\.\d*)?([eE][-+]?\d+)?))\s?)*)\b)/,/^(?:[-*/+^!%=();])/,/^(?:$)/,/^(?:\.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = examen;
exports.Parser = examen.Parser;
exports.parse = function () { return examen.parse.apply(examen, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}